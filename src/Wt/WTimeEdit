// This may look like C code, but it's really -*- C++ -*-
/*
 * Copyright (C) 2015 Emweb bvba, Kessel-Lo, Belgium.
 *
 * See the LICENSE file for terms of use.
 */
#ifndef WTIME_EDIT_H_
#define WTIME_EDIT_H_

#include <Wt/WLineEdit>
#include <Wt/WTime>
#include <Wt/WTimeValidator>
#include <Wt/WTimePicker>

namespace Wt {

/*! \class WTimeEdit Wt/WTimeEdit Wt/WTimeEdit
 *  \brief A Time field editor
 *
 *  \sa WTime
 *  \sa WTimeValidator
 *
 * Styling through CSS is not applicable.
 */
class WT_API WTimeEdit : public WLineEdit
{
public:
    /*! \brief Creates a new time edit.
     */
    WTimeEdit(WContainerWidget *parent = 0);

    virtual ~WTimeEdit();

    /*! \brief Sets the time
     *
     *  Does nothing if the current time is \p Null.
     *
     * \sa time()
     */
    void setTime(const WTime& time);

    /*! \brief Returns the time.
     *
     * Returns an invalid time (for which WTime::isValid() returns
     * \c false) if the time could not be parsed using the current
     * format().
     *
     * \sa setTime(), WTime::fromString(), WLineEdit::text()
     */
    WTime time() const;

    /*! \brief Returns the validator
     *
     * \sa WTimeValidator
     */
    virtual WTimeValidator *validator() const;

    /*! \brief Sets the format of the Time
     */
    void setFormat(const WT_USTRING& format);

    /*! \brief Returns the format.
     */
    WT_USTRING format() const;

    virtual void setHidden(bool hidden, const WAnimation& animation = WAnimation());

    /*! \brief Sets the lower limit of the valid time range
     */
    void setBottom(const WTime &bottom);

    /*! \brief Returns the lower limit of the valid time range
     */
    WTime bottom() const;

    /*! \brief Sets the upper limit of the valid time range
     */
    void setTop(const WTime &top);

    /*! \brief Returns the upper limit of the valid time range
     */
    WTime top() const;

    void setHourStep(int step);
    int hourStep() const;

    void setMinuteStep(int step);
    int minuteStep() const;

    void setSecondStep(int step);
    int secondStep() const;

    void setMillisecondStep(int step);
    int millisecondStep() const;

    void setWrapAroundEnabled(bool rollover);
    bool wrapAroundEnabled() const;

    virtual void load();

protected:
    virtual void render(WFlags<RenderFlag> flags);
    virtual void propagateSetEnabled(bool enabled);

private:
    void setFromTimePicker();
    void setFromLineEdit();
    WPopupWidget *popup_;
    WTimePicker *timePicker_;

    void defineJavaScript();
    void connectJavaScript(Wt::EventSignalBase& s,
			   const std::string& methodName);
};

}

#endif // WTIME_EDIT_H_
